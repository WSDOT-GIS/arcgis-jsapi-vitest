import{e as a,y as i,a as p}from"./JSONSupport-ed372989.js";import"./ensureType-348c3d61.js";import"./typedArrayUtil-96f93e5b.js";import{a as u}from"./Error-d97df89f.js";import{b as m}from"./string-feb899cf.js";import{d as f,h as d}from"./parser-a11e786f.js";function h(r,t,e){var n;try{return b(r)}catch(s){(n=e==null?void 0:e.messages)==null||n.push(s)}return null}function g(r,t,e,n){try{const s=y(r);m(e,s,t)}catch(s){n.messages&&n.messages.push(s)}}function y(r){const t=f(r);return t?d(t)?t.map(e=>e.toJSON()):t.map(({scale:e,effects:n})=>({scale:e,value:n.map(s=>s.toJSON())})):null}function b(r){if(!r||r.length===0)return null;if(w(r)){const t=[];for(const e of r)t.push({scale:e.scale,value:c(e.value)});return t}return c(r)}function w(r){const t=r[0];return!!t&&"scale"in t}function c(r){if(!r||!r.length)return"";const t=[];for(const e of r){let n=[];switch(e.type){case"grayscale":case"sepia":case"saturate":case"invert":case"brightness":case"contrast":case"opacity":n=[o(e,"amount")];break;case"blur":n=[o(e,"radius","pt")];break;case"hue-rotate":n=[o(e,"angle","deg")];break;case"drop-shadow":n=[o(e,"xoffset","pt"),o(e,"yoffset","pt"),o(e,"blurRadius","pt"),$(e,"color")];break;case"bloom":n=[o(e,"strength"),o(e,"radius","pt"),o(e,"threshold")]}const s=`${e.type}(${n.filter(Boolean).join(" ")})`;f(s),t.push(s)}return t.join(" ")}function o(r,t,e){if(r[t]==null)throw new u("effect:missing-parameter",`Missing parameter '${t}' in ${r.type} effect`,{effect:r});return e?r[t]+e:""+r[t]}function $(r,t){if(r[t]==null)throw new u("effect:missing-parameter",`Missing parameter '${t}' in ${r.type} effect`,{effect:r});const e=r[t];return`rgba(${e[0]||0}, ${e[1]||0}, ${e[2]||0}, ${e[3]/255||0})`}const l={read:{reader:h},write:{allowNull:!0,writer:g}},B=r=>{let t=class extends r{constructor(){super(...arguments),this.blendMode="normal",this.effect=null}};return a([i({type:["average","color-burn","color-dodge","color","darken","destination-atop","destination-in","destination-out","destination-over","difference","exclusion","hard-light","hue","invert","lighten","lighter","luminosity","minus","multiply","normal","overlay","plus","reflect","saturation","screen","soft-light","source-atop","source-in","source-out","vivid-light","xor"],nonNullable:!0,json:{read:!1,write:!1,origins:{"web-map":{read:!0,write:!0},"portal-item":{read:!0,write:!0}}}})],t.prototype,"blendMode",void 0),a([i({json:{read:!1,write:!1,origins:{"web-map":l,"portal-item":l}}})],t.prototype,"effect",void 0),t=a([p("esri.layers.mixins.BlendLayer")],t),t};export{h as a,g as b,c as i,B as n};
