function a(i){return i&&i.release&&typeof i.release=="function"}function h(i){return i&&i.acquire&&typeof i.acquire=="function"}class r{constructor(e,t,s,o=1,n=0){if(this._ctor=e,this._acquireFunction=t,this._releaseFunction=s,this.allocationSize=o,this._pool=new Array(n),this._initialSize=n,this._ctor)for(let l=0;l<n;l++)this._pool[l]=new this._ctor;this.allocationSize=Math.max(o,1)}destroy(){this.prune(0)}acquire(...e){let t;if(r.test.disabled)t=new this._ctor;else{if(this._pool.length===0){const s=this.allocationSize;for(let o=0;o<s;o++)this._pool[o]=new this._ctor}t=this._pool.pop()}return this._acquireFunction?this._acquireFunction(t,...e):h(t)&&t.acquire(...e),t}release(e){e&&!r.test.disabled&&(this._releaseFunction?this._releaseFunction(e):a(e)&&e.release(),this._pool.push(e))}prune(e=this._initialSize){if(!(e>=this._pool.length)){for(let t=e;t<this._pool.length;++t){const s=this._pool[t];this._dispose(s)}this._pool.length=e}}_dispose(e){e.dispose&&typeof e.dispose=="function"&&e.dispose()}}r.test={disabled:!1};function u(i){i.length=0}class p{constructor(e=50,t=50){this._pool=new r(Array,void 0,u,t,e)}acquire(){return this._pool.acquire()}release(e){this._pool.release(e)}prune(){this._pool.prune(0)}static acquire(){return c.acquire()}static release(e){return c.release(e)}static prune(){c.prune()}}const c=new p(100);export{r as e,p as t};
