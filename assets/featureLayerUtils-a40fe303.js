import{S as K,t as F,r as $}from"./typedArrayUtil-96f93e5b.js";import{s as R,a as m}from"./Error-d97df89f.js";import{x as f,E as D}from"./promiseUtils-ac1bd36f.js";import{i as w}from"./originUtils-1469eeaf.js";import q from"./FeatureLayer-42e1678e.js";import{d as z}from"./arcgisLayerUrl-9d6ab56c.js";import{r as M}from"./fetchService-280e3b9b.js";import{f as U,y as Y}from"./layerUtils-a0871894.js";import{b as _}from"./Portal-172924b2.js";import j from"./PortalItem-a25335a3.js";import{o as v}from"./jsonContext-97094046.js";import{i as c,a as B,c as g,u as n}from"./portalItemUtils-72345980.js";import"./string-feb899cf.js";import"./multiOriginJSONSupportUtils-c978f4c3.js";import"./preload-helper-f8378b50.js";import"./JSONSupport-ed372989.js";import"./ensureType-348c3d61.js";import"./nextTick-3ee5a785.js";import"./PopupTemplate-63dce4d3.js";import"./Clonable-5318ec31.js";import"./Collection-d9d92883.js";import"./Evented-e2ee9722.js";import"./SimpleObservable-04055e8d.js";import"./cast-73cfc253.js";import"./Extent-fd3ac910.js";import"./fieldUtils-66be74eb.js";import"./geometry-d89d4a34.js";import"./Polyline-9d44200b.js";import"./typeUtils-2ccaf90d.js";import"./enumeration-49e09bda.js";import"./number-205e28e0.js";import"./locale-30120714.js";import"./Identifiable-876da2a8.js";import"./UniqueValueRenderer-b6a7d586.js";import"./symbols-946d4e11.js";import"./CIMSymbol-0fa077f5.js";import"./Color-9f46ece8.js";import"./colorUtils-639f4d25.js";import"./mathUtils-b3bee9e7.js";import"./screenUtils-7afeb41c.js";import"./opacityUtils-cc413a8c.js";import"./symbolLayerUtils3D-0c6ed99a.js";import"./aaBoundingBox-1eda6d1b.js";import"./request-7c0a9d4c.js";import"./persistableUrlUtils-26091271.js";import"./collectionUtils-e98ed3f0.js";import"./LegendOptions-8200d5f5.js";import"./reactiveUtils-307e98f9.js";import"./diffUtils-ac6d6369.js";import"./colorRamps-fff34da2.js";import"./sizeVariableUtils-d4870b0d.js";import"./visualVariableUtils-6f05f98d.js";import"./Graphic-f117754c.js";import"./jsonUtils-dd0891e0.js";import"./compilerUtils-8d4f8499.js";import"./lengthUtils-bc8879ed.js";import"./Loadable-c96deb83.js";import"./Promise-34cff6d6.js";import"./PortalGroup-751b527f.js";import"./PortalUser-7f979a04.js";import"./jsonUtils-7442f08f.js";import"./styleUtils-1d3bc535.js";import"./jsonUtils-37cc07d7.js";import"./DictionaryLoader-0dadb1e0.js";import"./LRUCache-9c365b2a.js";import"./MemCache-7d4aa654.js";import"./deprecate-424c57c7.js";import"./heatmapUtils-16ee21b5.js";import"./vec4f64-aa64c7e9.js";import"./MultiOriginJSONSupport-97bf66dd.js";import"./serviceCapabilitiesUtils-02cebe9b.js";import"./FeatureLayerBase-de1a166f.js";import"./Field-b17a677d.js";import"./fieldType-b21f2e7f.js";import"./HeightModelInfo-bad6650e.js";import"./OperationalLayer-a420b681.js";import"./TimeExtent-d2d7594c.js";import"./ElevationInfo-75e7bf35.js";import"./TimeReference-b6332926.js";import"./datetime-b6333958.js";import"./AttachmentQuery-c89a8ac2.js";import"./Query-bf719160.js";import"./DataLayerSource-71059dc4.js";import"./RelationshipQuery-a13e27d1.js";import"./Layer-07a07202.js";import"./HandleOwner-4c8d824c.js";import"./workers-4f8dfa2f.js";import"./Connection-5e453cc1.js";import"./Queue-c92bc561.js";import"./assets-2c955bed.js";import"./intl-7c488bb0.js";import"./messages-226fbb40.js";import"./editsZScale-b954eebc.js";import"./queryZScale-a0b71b11.js";import"./zscale-e06cee6f.js";import"./FeatureSet-00b7d51e.js";import"./APIKeyMixin-b93c2049.js";import"./ArcGISService-cca20289.js";import"./BlendLayer-5cec7349.js";import"./parser-a11e786f.js";import"./mat4f32-60a2394b.js";import"./mat4-1ee69bd5.js";import"./CustomParametersMixin-01a04769.js";import"./EditBusLayer-984da402.js";import"./FeatureReductionLayer-fd41123b.js";import"./labelingInfo-f7d1c159.js";import"./labelUtils-6965a8ca.js";import"./defaultsJSON-b087dd4d.js";import"./OrderedLayer-9cb8835d.js";import"./PortalLayer-d54f6a39.js";import"./asyncUtils-f0fdc8c7.js";import"./RefreshableLayer-672ecb56.js";import"./ScaleRangeLayer-24099455.js";import"./TemporalLayer-c479c738.js";import"./FeatureTemplate-1fd8fac4.js";import"./FeatureType-b736019f.js";import"./fieldProperties-1fb52610.js";import"./FieldsIndex-7c963fe9.js";import"./versionUtils-aabb6832.js";import"./styleUtils-f45b991d.js";import"./TopFeaturesQuery-5bb7c994.js";import"./popupUtils-3d5141e6.js";import"./projection-d7a5b449.js";const C=R.getLogger("esri.layers.FeatureLayer"),d="Feature Service";function u(t,r){return`Layer (title: ${t.title}, id: ${t.id}) of type '${t.declaredClass}' ${r}`}function E(t,r){if(r.type!==d)throw new m("feature-layer:portal-item-wrong-type",u(t,`should have portal item of type "${d}"`))}async function J(t){if(await t.load(),U(t))throw new m("feature-layer:save",u(t,"using an in-memory source cannot be saved to a portal item"))}function G(t,r){let a=(t.messages??[]).filter(({type:o})=>o==="error").map(({name:o,message:i,details:e})=>new m(o,i,e));if(r!=null&&r.ignoreUnsupported&&(a=a.filter(({name:o})=>o!=="layer:unsupported"&&o!=="symbol:unsupported"&&o!=="symbol-layer:unsupported"&&o!=="property:unsupported"&&o!=="url:unsupported")),a.length>0)throw new m("feature-layer:save","Failed to save feature layer due to unsupported or invalid content. See 'details.errors' for more detailed information",{errors:a})}async function h(t,r,a){"beforeSave"in t&&typeof t.beforeSave=="function"&&await t.beforeSave();const o=t.write({},r);return G(r,a),o}function N(t){const{layer:r,layerJSON:a}=t;return r.isTable?{layers:[],tables:[a]}:{layers:[a],tables:[]}}function b(t){c(t,n.JSAPI),t.typeKeywords&&(t.typeKeywords=t.typeKeywords.filter((r,a,o)=>o.indexOf(r)===a))}function H(t){const r=t.portalItem;if(!r)throw C.error("save: requires the portalItem property to be set"),new m("feature-layer:portal-item-not-set",u(t,"requires the portalItem property to be set"));if(!r.loaded)throw new m("feature-layer:portal-item-not-loaded",u(t,"cannot be saved to a portal item that does not exist or is inaccessible"));E(t,r)}async function O(t,r){return/\/\d+\/?$/.test(t.url??"")?N(r[0]):k(t,r)}async function k(t,r){const{layer:{url:a,customParameters:o,apiKey:i}}=r[0];let e=await t.fetchData("json");e&&e.layers!=null&&e.tables!=null||(e=await Q(e,{url:a??"",customParameters:o,apiKey:i},r.map(p=>p.layer.layerId)));for(const p of r)P(p.layer,p.layerJSON,e);return e}async function Q(t,r,a){var o,i;t||(t={}),(o=t).layers||(o.layers=[]),(i=t).tables||(i.tables=[]);const{url:e,customParameters:p,apiKey:s}=r,{serviceJSON:l,layersJSON:y}=await M(e,{customParameters:p,apiKey:s}),S=x(t.layers,l.layers,a),I=x(t.tables,l.tables,a);t.layers=S.itemResources,t.tables=I.itemResources;const T=[...S.added,...I.added],L=y?[...y.layers,...y.tables]:[];return await V(t,T,e,L),t}function x(t,r,a){const o=K(t,r,(e,p)=>e.id===p.id);t=t.filter(e=>!o.removed.some(p=>p.id===e.id));const i=o.added.map(({id:e})=>({id:e}));return i.forEach(({id:e})=>{t.push({id:e})}),{itemResources:t,added:i.filter(({id:e})=>!a.includes(e))}}async function V(t,r,a,o){const i=r.map(({id:e})=>new q({url:a,layerId:e,sourceJSON:o.find(({id:p})=>p===e)}));await D(i.map(e=>e.load())),i.forEach(e=>{const{layerId:p,loaded:s,defaultPopupTemplate:l}=e;!s||F(l)||P(e,{id:p,popupInfo:l.toJSON()},t)})}function P(t,r,a){t.isTable?A(a.tables,r):A(a.layers,r)}function A(t,r){if(!t)return;const a=t.findIndex(({id:o})=>o===r.id);a===-1?t.push(r):t[a]=r}function W(t){const{portalItem:r}=t;return Y(t)&&!t.dynamicDataSource&&!!(r!=null&&r.loaded)&&r.type===d}async function X(t){if(!(t!=null&&t.length))throw new m("feature-layer-utils-saveall:missing-parameters","'layers' array should contain at least one feature layer");await Promise.all(t.map(o=>o.load()));for(const o of t)if(!W(o))throw new m("feature-layer-utils-saveall:invalid-parameters",`'layers' array should only contain layers or tables in a feature service loaded from 'Feature Service' item. ${u(o,"does not conform")}`,{layer:o});const r=t.map(o=>o.portalItem.id);if(new Set(r).size>1)throw new m("feature-layer-utils-saveall:invalid-parameters","All layers in the 'layers' array should be loaded from the same portal item");const a=t.map(o=>o.layerId);if(new Set(a).size!==a.length)throw new m("feature-layer-utils-saveall:invalid-parameters","'layers' array should contain only one instance each of layer or table in a feature service")}function Z(t,r){var a,o;let i=j.from(r);return i.id&&(i=i.clone(),i.id=null),(a=i).type??(a.type=d),(o=i).portal??(o.portal=_.getDefault()),E(t,i),i}async function tt(t,r){const{url:a,layerId:o,title:i,fullExtent:e,isTable:p}=t,s=z(a),l=$(s)&&s.serverType==="FeatureServer";r.url=l?a:`${a}/${o}`,r.title||(r.title=i),r.extent=null,!p&&$(e)&&(r.extent=await B(e)),g(r,n.METADATA),g(r,n.MULTI_LAYER),c(r,n.SINGLE_LAYER),p&&c(r,n.TABLE),b(r)}async function rt(t,r,a){var i;const o=t.portal;await(o==null?void 0:o.signIn()),await((i=o==null?void 0:o.user)==null?void 0:i.addItem({item:t,data:r,folder:a==null?void 0:a.folder}))}const So=f(ot);async function ot(t,r){await J(t),H(t);const a=t.portalItem,o=v(a),i=await h(t,o,r),e=await O(a,[{layer:t,layerJSON:i}]);return b(a),await a.update({data:e}),w(o),a}const Io=f(async(t,r)=>{await X(t);const a=t[0].portalItem,o=v(a),i=await Promise.all(t.map(p=>h(p,o,r))),e=await O(a,t.map((p,s)=>({layer:p,layerJSON:i[s]})));return b(a),await a.update({data:e}),await Promise.all(t.slice(1).map(p=>p.portalItem.reload())),w(o),a.clone()}),$o=f(at);async function at(t,r,a){await J(t);const o=Z(t,r),i=v(o),e=N({layer:t,layerJSON:await h(t,i,a)});return await tt(t,o),await rt(o,e,a),t.portalItem=o,w(i),o}export{So as save,Io as saveAll,$o as saveAs};
