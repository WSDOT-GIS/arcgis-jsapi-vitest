import{b as p,a}from"./Error-781981d1.js";import{b as l}from"./Portal-2a7c40a2.js";import{a as s,n as c}from"./project-d79a754b.js";import"./string-75082bc6.js";import"./typedArrayUtil-74bbfd45.js";import"./preload-helper-f8378b50.js";import"./Accessor-815cb0cf.js";import"./watch-c7facfb0.js";import"./ArrayPool-ae2ef0ab.js";import"./nextTick-3ee5a785.js";import"./promiseUtils-28f2a985.js";import"./ensureType-125d327f.js";import"./request-ae7029ea.js";import"./JSONSupport-2b897629.js";import"./Loadable-6776e4d9.js";import"./Promise-092442f7.js";import"./Extent-8fae2379.js";import"./cast-f7d2a22f.js";import"./locale-30120714.js";import"./PortalGroup-d3a43002.js";import"./PortalUser-c84fcbac.js";import"./jsonUtils-15ca15d7.js";import"./Polyline-40b9e769.js";import"./utils-19aa96f8.js";import"./utils-067ee6bc.js";async function f(r=null,n){var o,t;if(p.geometryServiceUrl)return p.geometryServiceUrl;if(!r)throw new a("internal:geometry-service-url-not-configured");let e;e="portal"in r?r.portal||l.getDefault():r,await e.load({signal:n});const i=(t=(o=e.helperServices)==null?void 0:o.geometry)==null?void 0:t.url;if(!i)throw new a("internal:geometry-service-url-not-configured");return i}async function H(r,n,e=null,i){const o=await f(e,i),t=new s;t.geometries=[r],t.outSpatialReference=n;const m=await c(o,t,{signal:i});if(m&&Array.isArray(m)&&m.length===1)return m[0];throw new a("internal:geometry-service-projection-failed")}export{f as getGeometryServiceURL,H as projectGeometry};
