import{f as d}from"./utils-19aa96f8.js";import{U as f}from"./request-ae7029ea.js";import{t as y}from"./urlUtils-6a004888.js";import{x as R}from"./FeatureSet-736831f6.js";import u from"./RelationshipQuery-9431dd85.js";import"./Error-781981d1.js";import"./string-75082bc6.js";import"./typedArrayUtil-74bbfd45.js";import"./preload-helper-f8378b50.js";import"./promiseUtils-28f2a985.js";import"./Accessor-815cb0cf.js";import"./watch-c7facfb0.js";import"./ArrayPool-ae2ef0ab.js";import"./nextTick-3ee5a785.js";import"./ensureType-125d327f.js";import"./geometry-0d19f94b.js";import"./Extent-8fae2379.js";import"./JSONSupport-2b897629.js";import"./cast-f7d2a22f.js";import"./Polyline-40b9e769.js";import"./typeUtils-3bf84b36.js";import"./Graphic-3183b8e9.js";import"./PopupTemplate-c559259f.js";import"./Clonable-6d5134c7.js";import"./Collection-912f4315.js";import"./Evented-3dfb26f2.js";import"./SimpleObservable-729c9019.js";import"./fieldUtils-e6cf5e5f.js";import"./enumeration-94b1319d.js";import"./number-5e819186.js";import"./locale-30120714.js";import"./ActionToggle-dc9b6fc6.js";import"./Identifiable-f5397426.js";import"./symbols-df54e69f.js";import"./CIMSymbol-e48b86be.js";import"./Color-5e799d63.js";import"./colorUtils-639f4d25.js";import"./mathUtils-15f63a45.js";import"./screenUtils-7afeb41c.js";import"./opacityUtils-107b33de.js";import"./symbolLayerUtils3D-15190f75.js";import"./aaBoundingBox-5e14079b.js";import"./persistableUrlUtils-73be900a.js";import"./collectionUtils-5a99c1c0.js";import"./Portal-2a7c40a2.js";import"./Loadable-6776e4d9.js";import"./Promise-092442f7.js";import"./PortalGroup-d3a43002.js";import"./PortalUser-c84fcbac.js";import"./jsonUtils-15ca15d7.js";import"./Field-7770b57d.js";import"./fieldType-e429d020.js";import"./DataLayerSource-3a7a94c9.js";function j(e,o){const t=e.toJSON();return t.objectIds&&(t.objectIds=t.objectIds.join(",")),t.orderByFields&&(t.orderByFields=t.orderByFields.join(",")),t.outFields&&!(o!=null&&o.returnCountOnly)?t.outFields.includes("*")?t.outFields="*":t.outFields=t.outFields.join(","):delete t.outFields,t.outSpatialReference&&(t.outSR=t.outSR.wkid||JSON.stringify(t.outSR.toJSON()),delete t.outSpatialReference),t.dynamicDataSource&&(t.layer=JSON.stringify({source:t.dynamicDataSource}),delete t.dynamicDataSource),t}async function S(e,o,t){const i=await l(e,o,t),r=i.data,n=r.geometryType,m=r.spatialReference,p={};for(const a of r.relatedRecordGroups){const c={fields:void 0,objectIdFieldName:void 0,geometryType:n,spatialReference:m,hasZ:!!r.hasZ,hasM:!!r.hasM,features:a.relatedRecords};if(a.objectId!=null)p[a.objectId]=c;else for(const s in a)a.hasOwnProperty(s)&&s!=="relatedRecords"&&(p[a[s]]=c)}return{...i,data:p}}async function h(e,o,t){const i=await l(e,o,t,{returnCountOnly:!0}),r=i.data,n={};for(const m of r.relatedRecordGroups)m.objectId!=null&&(n[m.objectId]=m.count);return{...i,data:n}}async function l(e,o,t={},i){const r=y({...e.query,f:"json",...i,...j(o,i)});return f(e.path+"/queryRelatedRecords",{...t,query:{...t.query,...r}})}async function ht(e,o,t){o=u.from(o);const i=d(e);return S(i,o,t).then(r=>{const n=r.data,m={};return Object.keys(n).forEach(p=>m[p]=R.fromJSON(n[p])),m})}async function Ft(e,o,t){o=u.from(o);const i=d(e);return h(i,o,{...t}).then(r=>r.data)}export{ht as executeRelationshipQuery,Ft as executeRelationshipQueryForCount};
