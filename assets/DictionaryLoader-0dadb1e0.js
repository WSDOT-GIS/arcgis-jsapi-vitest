import{l as w}from"./Color-9f46ece8.js";import{U as S}from"./request-7c0a9d4c.js";import{s as M,a as L}from"./Error-d97df89f.js";import{e as R}from"./LRUCache-9c365b2a.js";import{r as g,t as I}from"./typedArrayUtil-96f93e5b.js";import{j as v}from"./promiseUtils-ac1bd36f.js";import{d as $}from"./string-feb899cf.js";import{i as N,d as T}from"./fieldUtils-66be74eb.js";import{d as j}from"./CIMSymbol-0fa077f5.js";import"./colorUtils-639f4d25.js";import"./mathUtils-b3bee9e7.js";import"./ensureType-348c3d61.js";import"./preload-helper-f8378b50.js";import"./MemCache-7d4aa654.js";import"./JSONSupport-ed372989.js";import"./nextTick-3ee5a785.js";import"./geometry-d89d4a34.js";import"./Extent-fd3ac910.js";import"./cast-73cfc253.js";import"./Polyline-9d44200b.js";import"./typeUtils-2ccaf90d.js";import"./enumeration-49e09bda.js";const P="esri.renderers.support.DictionaryLoader",q={type:"CIMSimpleLineCallout",lineSymbol:{type:"CIMLineSymbol",symbolLayers:[{type:"CIMSolidStroke",width:.5,color:[0,0,0,255]}]}};class st{constructor(t,s,e){this.config=null,this.fieldMap=null,this.url=null,this._ongoingRequests=new Map,this._symbolCache=new R(100),this._dictionaryPromise=null,this.url=t,this.config=s,this.fieldMap=e}getSymbolFields(){return this._symbolFields}async getSymbolAsync(t,s){let e;this._dictionaryPromise||(this._dictionaryPromise=this.fetchResources(s));try{e=await this._dictionaryPromise}catch(n){if(v(n))return this._dictionaryPromise=null,null}const i={};if(this.fieldMap)for(const n of this._symbolFields){const m=this.fieldMap[n];if(m&&t.attributes[m]!=null){const b=""+t.attributes[m];i[n]=b}else i[n]=""}const r=e==null?void 0:e(i,s);if(!r||typeof r!="string")return null;const l=$(r).toString(),f=this._symbolCache.get(l);if(f)return f.catch(()=>{this._symbolCache.pop(l)}),f;const a=r.split(";"),o=[],c=[];for(const n of a)if(n)if(n.includes("po:")){const m=n.substr(3).split("|");if(m.length===3){const b=m[0],_=m[1];let y=m[2];if(_==="DashTemplate")y=y.split(" ").map(u=>Number(u));else if(_==="Color"){const u=new w(y).toRgba();y=[u[0],u[1],u[2],255*u[3]]}else y=Number(y);c.push({primitiveName:b,propertyName:_,value:y})}}else if(n.includes("|")){for(const m of n.split("|"))if(this._itemNames.has(m)){o.push(m);break}}else this._itemNames.has(n)&&o.push(n);const p=!g(t.geometry)||!t.geometry.hasZ&&t.geometry.type==="point",h=this._cimPartsToCIMSymbol(o,c,p,s);return this._symbolCache.put(l,h,1),h}async fetchResources(t){if(this._dictionaryPromise)return this._dictionaryPromise;if(!this.url)return void M.getLogger(P).error("no valid URL!");const s=S(this.url+"/resources/styles/dictionary-info.json",{responseType:"json",query:{f:"json"},signal:g(t)?t.signal:null}),[{data:e}]=await Promise.all([s,N()]);if(!e)throw this._dictionaryPromise=null,new L("esri.renderers.DictionaryRenderer","Bad dictionary data!");const i=e.expression,r=e.authoringInfo;this._refSymbolUrlTemplate=this.url+"/"+e.cimRefTemplateUrl,this._itemNames=new Set(e.itemsNames),this._symbolFields=r.symbol;const l={};if(this.config){const o=this.config;for(const c in o)l[c]=o[c]}if(r.configuration)for(const o of r.configuration)l.hasOwnProperty(o.name)||(l[o.name]=o.value);const f=[];if(g(t)&&t.fields&&this.fieldMap)for(const o of this._symbolFields){const c=this.fieldMap[o],p=t.fields.filter(h=>h.name===c);p.length>0&&f.push({...p[0],name:o})}const a=T(i,g(t)?t.spatialReference:null,f,l).then(o=>{const c={scale:0};return(p,h)=>{if(I(o))return null;const n=o.repurposeFeature({geometry:null,attributes:p});return c.scale=g(h)?h.scale??void 0:void 0,o.evaluate({$feature:n,$view:c})}}).catch(o=>(M.getLogger(P).error("Creating dictinoary expression failed:",o),null));return this._dictionaryPromise=a,a}async _cimPartsToCIMSymbol(t,s,e,i){const r=new Array(t.length);for(let a=0;a<t.length;a++)r[a]=this._getSymbolPart(t[a],i);const l=await Promise.all(r),f=this.fieldMap;if(f)for(const a of l)C(a,f);return new j({data:this._combineSymbolParts(l,s,e)})}async _getSymbolPart(t,s){if(this._ongoingRequests.has(t))return this._ongoingRequests.get(t).then(r=>r.data);const e=this._refSymbolUrlTemplate.replace(/\{itemName\}/gi,t),i=S(e,{responseType:"json",query:{f:"json"},...s});this._ongoingRequests.set(t,i);try{return(await i).data}catch(r){throw this._ongoingRequests.delete(t),r}}_combineSymbolParts(t,s,e){if(!t||t.length===0)return null;const i={...t[0]};if(t.length>1){i.symbolLayers=[];for(const r of t){const l=r;i.symbolLayers.unshift(...l.symbolLayers)}}return e&&(i.callout=q),{type:"CIMSymbolReference",symbol:i,primitiveOverrides:s}}}function C(d,t){if(!d)return;const s=d.symbolLayers;if(!s)return;let e=s.length;for(;e--;){const i=s[e];i&&i.enable!==!1&&i.type==="CIMVectorMarker"&&F(i,t)}}function F(d,t){const s=d.markerGraphics;if(s)for(const e of s){if(!e)continue;const i=e.symbol;if(i)switch(i.type){case"CIMPointSymbol":case"CIMLineSymbol":case"CIMPolygonSymbol":C(i,t);break;case"CIMTextSymbol":i.fieldMap=t}}}export{st as DictionaryLoader};
