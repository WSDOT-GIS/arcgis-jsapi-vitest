import{f as d}from"./utils-ada6b2ec.js";import{U as f}from"./request-7c0a9d4c.js";import{t as y}from"./urlUtils-6a004888.js";import{x as R}from"./FeatureSet-00b7d51e.js";import u from"./RelationshipQuery-a13e27d1.js";import"./Error-d97df89f.js";import"./string-feb899cf.js";import"./typedArrayUtil-96f93e5b.js";import"./preload-helper-f8378b50.js";import"./promiseUtils-ac1bd36f.js";import"./JSONSupport-ed372989.js";import"./ensureType-348c3d61.js";import"./nextTick-3ee5a785.js";import"./geometry-d89d4a34.js";import"./Extent-fd3ac910.js";import"./cast-73cfc253.js";import"./Polyline-9d44200b.js";import"./typeUtils-2ccaf90d.js";import"./Graphic-f117754c.js";import"./PopupTemplate-63dce4d3.js";import"./Clonable-5318ec31.js";import"./Collection-d9d92883.js";import"./Evented-e2ee9722.js";import"./SimpleObservable-04055e8d.js";import"./fieldUtils-66be74eb.js";import"./enumeration-49e09bda.js";import"./number-205e28e0.js";import"./locale-30120714.js";import"./Identifiable-876da2a8.js";import"./symbols-946d4e11.js";import"./CIMSymbol-0fa077f5.js";import"./Color-9f46ece8.js";import"./colorUtils-639f4d25.js";import"./mathUtils-b3bee9e7.js";import"./screenUtils-7afeb41c.js";import"./opacityUtils-cc413a8c.js";import"./symbolLayerUtils3D-0c6ed99a.js";import"./aaBoundingBox-1eda6d1b.js";import"./persistableUrlUtils-26091271.js";import"./collectionUtils-e98ed3f0.js";import"./Portal-172924b2.js";import"./Loadable-c96deb83.js";import"./Promise-34cff6d6.js";import"./PortalGroup-751b527f.js";import"./PortalUser-7f979a04.js";import"./jsonUtils-dd0891e0.js";import"./Field-b17a677d.js";import"./fieldType-b21f2e7f.js";import"./DataLayerSource-71059dc4.js";function j(e,o){const t=e.toJSON();return t.objectIds&&(t.objectIds=t.objectIds.join(",")),t.orderByFields&&(t.orderByFields=t.orderByFields.join(",")),t.outFields&&!(o!=null&&o.returnCountOnly)?t.outFields.includes("*")?t.outFields="*":t.outFields=t.outFields.join(","):delete t.outFields,t.outSpatialReference&&(t.outSR=t.outSR.wkid||JSON.stringify(t.outSR.toJSON()),delete t.outSpatialReference),t.dynamicDataSource&&(t.layer=JSON.stringify({source:t.dynamicDataSource}),delete t.dynamicDataSource),t}async function S(e,o,t){const i=await l(e,o,t),r=i.data,m=r.geometryType,n=r.spatialReference,p={};for(const a of r.relatedRecordGroups){const c={fields:void 0,objectIdFieldName:void 0,geometryType:m,spatialReference:n,hasZ:!!r.hasZ,hasM:!!r.hasM,features:a.relatedRecords};if(a.objectId!=null)p[a.objectId]=c;else for(const s in a)a.hasOwnProperty(s)&&s!=="relatedRecords"&&(p[a[s]]=c)}return{...i,data:p}}async function h(e,o,t){const i=await l(e,o,t,{returnCountOnly:!0}),r=i.data,m={};for(const n of r.relatedRecordGroups)n.objectId!=null&&(m[n.objectId]=n.count);return{...i,data:m}}async function l(e,o,t={},i){const r=y({...e.query,f:"json",...i,...j(o,i)});return f(e.path+"/queryRelatedRecords",{...t,query:{...t.query,...r}})}async function yt(e,o,t){o=u.from(o);const i=d(e);return S(i,o,t).then(r=>{const m=r.data,n={};return Object.keys(m).forEach(p=>n[p]=R.fromJSON(m[p])),n})}async function Rt(e,o,t){o=u.from(o);const i=d(e);return h(i,o,{...t}).then(r=>r.data)}export{yt as executeRelationshipQuery,Rt as executeRelationshipQueryForCount};
