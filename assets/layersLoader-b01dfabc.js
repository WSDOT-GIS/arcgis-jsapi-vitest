import{a as y}from"./Error-781981d1.js";import{b as m}from"./Layer-9c99e5a9.js";import{m as S}from"./arcgisLayerUrl-94ca51fa.js";import{t as b,r as T}from"./fetchService-659cc3dd.js";import{b as v}from"./Portal-c7b19d88.js";import F from"./PortalItem-90bf2143.js";import{e as G}from"./jsonContext-2d0e3b89.js";import{s as $}from"./portalItemUtils-2867876d.js";import{t as D}from"./styleUtils-023b7cfa.js";import"./string-75082bc6.js";import"./typedArrayUtil-74bbfd45.js";import"./preload-helper-fb43855a.js";import"./Accessor-815cb0cf.js";import"./watch-c7facfb0.js";import"./ArrayPool-ae2ef0ab.js";import"./nextTick-3ee5a785.js";import"./promiseUtils-28f2a985.js";import"./ensureType-125d327f.js";import"./geometry-0d19f94b.js";import"./Extent-8fae2379.js";import"./JSONSupport-2b897629.js";import"./cast-f7d2a22f.js";import"./Polyline-40b9e769.js";import"./typeUtils-3bf84b36.js";import"./request-6e1d5843.js";import"./Evented-3dfb26f2.js";import"./Identifiable-f5397426.js";import"./Loadable-6776e4d9.js";import"./Promise-092442f7.js";import"./persistableUrlUtils-0364346d.js";import"./locale-30120714.js";import"./PortalGroup-d3a43002.js";import"./PortalUser-a3f3561a.js";import"./assets-7bd3ffcf.js";import"./projection-6de68766.js";import"./mathUtils-15f63a45.js";import"./SimpleObservable-729c9019.js";import"./mat4-a8da3f27.js";import"./zscale-a617710a.js";import"./asyncUtils-5c97747c.js";async function Gt(t,r){const e=t.instance.portalItem;if(e&&e.id)return await e.load(r),O(t),x(t,r)}function O(t){const r=t.instance.portalItem;if(!(r!=null&&r.type)||!t.supportedTypes.includes(r.type))throw new y("portal:invalid-layer-item-type","Invalid layer item type '${type}', expected '${expectedType}'",{type:r==null?void 0:r.type,expectedType:t.supportedTypes.join(", ")})}async function x(t,r){const e=t.instance,a=e.portalItem;if(!a)return;const{url:o,title:i}=a,l=G(a);if(e.type==="group")return e.read({title:i},l),M(e,t);o&&e.read({url:o},l);const n=await g(t,r);return n&&e.read(n,l),e.resourceReferences={portalItem:a,paths:l.readResourcePaths??[]},e.type!=="subtype-group"&&e.read({title:i},l),D(e,l)}async function M(t,r){let e;const{portalItem:a}=t;if(!a)return;const o=a.type,i=r.layerModuleTypeMap,l=$(a,"Oriented Imagery Layer")??!1;switch(o){case"Feature Service":e=l?i.OrientedImageryLayer:i.FeatureLayer;break;case"Stream Service":e=i.StreamLayer;break;case"Scene Service":e=i.SceneLayer;break;case"Feature Collection":e=i.FeatureLayer;break;default:throw new y("portal:unsupported-item-type-as-group",`The item type '${o}' is not supported as a 'IGroupLayer'`)}let[n,s]=await Promise.all([e(),g(r)]),p=()=>n;if(o==="Feature Service"){if(s=a.url?await k(s,a.url):{},h(s).length){const w=i.SubtypeGroupLayer,I=await w();p=L=>L.layerType==="SubtypeGroupLayer"?I:n}return u(t,p,s,await R(a.url))}return c(s)>0?u(t,p,s):P(t,p)}async function P(t,r){var o,i;const{portalItem:e}=t;if(!(e!=null&&e.url))return;const a=await b(e.url);a&&u(t,r,{layers:(o=a.layers)==null?void 0:o.map(d),tables:(i=a.tables)==null?void 0:i.map(d)})}function d(t){return{id:t.id,name:t.name}}function u(t,r,e,a){var l;let o=e.layers||[];const i=e.tables||[];if(((l=t.portalItem)==null?void 0:l.type)==="Feature Collection"&&(o.forEach(n=>{var s;((s=n==null?void 0:n.layerDefinition)==null?void 0:s.type)==="Table"&&i.push(n)}),o=o.filter(n=>{var s;return((s=n==null?void 0:n.layerDefinition)==null?void 0:s.type)!=="Table"})),"coverage"in e){const n=j(e);n&&t.add(n)}o.reverse().forEach(n=>{const s=f(t,r(n),e,n,a==null?void 0:a(n));t.add(s)}),i.reverse().forEach(n=>{const s=f(t,r(n),e,n,a==null?void 0:a(n));t.tables.add(s)})}function f(t,r,e,a,o){const i=t.portalItem,l=new r({portalItem:i.clone(),layerId:a.id});if("sourceJSON"in l&&(l.sourceJSON=o),l.type!=="subtype-group"&&(l.sublayerTitleMode="service-name"),i.type==="Feature Collection"){const n={origin:"portal-item",portal:i.portal||v.getDefault()};l.read(a,n);const s=e.showLegend;s!=null&&l.read({showLegend:s},n)}return l}async function g(t,r){if(t.supportsData===!1)return;const e=t.instance,a=e.portalItem;if(!a)return;let o=null;try{o=await a.fetchData("json",r)}catch{}if(N(e)){let i=null,l=!0;if(o&&c(o)>0){if(e.layerId==null){const n=h(o);e.layerId=e.type==="subtype-group"?n==null?void 0:n[0]:C(o)}i=E(o,e),i&&(c(o)===1&&(l=!1),o.showLegend!=null&&(i.showLegend=o.showLegend))}return l&&e.sublayerTitleMode!=="service-name"&&(e.sublayerTitleMode="item-title-and-service-name"),i}return o}async function k(t,r){if((t==null?void 0:t.layers)==null||(t==null?void 0:t.tables)==null){const e=await b(r);(t=t||{}).layers=t.layers||(e==null?void 0:e.layers),t.tables=t.tables||(e==null?void 0:e.tables)}return t}function C(t){const r=t.layers;if(r&&r.length)return r[0].id;const e=t.tables;return e&&e.length?e[0].id:null}function E(t,r){var o,i;const{layerId:e}=r,a=((o=t.layers)==null?void 0:o.find(l=>l.id===e))||((i=t.tables)==null?void 0:i.find(l=>l.id===e));return a&&J(a,r)?a:null}function c(t){var r,e;return(((r=t==null?void 0:t.layers)==null?void 0:r.length)??0)+(((e=t==null?void 0:t.tables)==null?void 0:e.length)??0)}function N(t){return t.type!=="stream"&&t.type!=="oriented-imagery"&&"layerId"in t}function j(t){const{coverage:r}=t;if(!r)return null;const e=new URL(r);if(r.toLowerCase().includes("item.html")){const a=e.searchParams.get("id"),o=e.origin;return m.fromPortalItem({portalItem:new F({id:a,url:o})})}if(S(r))return m.fromArcGISServerUrl({url:r});throw new y("portal:oriented-imagery-layer-coverage","the provided coverage url couldn't be loaded as a layer")}function h(t){var e;const r=[];return(e=t==null?void 0:t.layers)==null||e.forEach(a=>{a.layerType==="SubtypeGroupLayer"&&r.push(a.id)}),r}function J(t,r){return!(r.type==="feature"&&"layerType"in t&&t.layerType==="SubtypeGroupLayer"||r.type==="subtype-group"&&!("layerType"in t))}async function R(t){const{layersJSON:r}=await T(t);if(!r)return null;const e=[...r.layers,...r.tables];return a=>e.find(o=>o.id===a.id)}export{C as getFirstLayerOrTableId,c as getNumLayersAndTables,h as getSubtypeGroupLayerIds,Gt as load,k as preprocessFSItemData};
