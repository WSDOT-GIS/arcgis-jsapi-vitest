import"./geometry-0d19f94b.js";import{r as a,g as l}from"./typedArrayUtil-74bbfd45.js";import{c}from"./projection-319bc7cc.js";import{b as i,d as p,R as f,c as u,e as d,f as S,m as h,g as y}from"./dataUtils-3c4d61ef.js";import{S as x,T as O,p as N}from"./RasterSymbolizer-fc0c6d8e.js";import{C as J,i as b}from"./utils-2e79f760.js";import{M as g,T as w,$ as B}from"./rasterProjectionHelper-26daf988.js";import{w as m}from"./Extent-8fae2379.js";import"./ensureType-125d327f.js";import"./string-75082bc6.js";import"./Error-781981d1.js";import"./Polyline-40b9e769.js";import"./Accessor-815cb0cf.js";import"./watch-c7facfb0.js";import"./ArrayPool-ae2ef0ab.js";import"./nextTick-3ee5a785.js";import"./promiseUtils-28f2a985.js";import"./typeUtils-3bf84b36.js";import"./cast-f7d2a22f.js";import"./preload-helper-f8378b50.js";import"./mathUtils-15f63a45.js";import"./SimpleObservable-729c9019.js";import"./mat4-a8da3f27.js";import"./assets-01239caf.js";import"./request-ae7029ea.js";import"./zscale-a617710a.js";import"./JSONSupport-2b897629.js";import"./pixelRangeUtils-03719dd8.js";import"./colorUtils-c0f43caf.js";import"./Color-5e799d63.js";import"./colorUtils-639f4d25.js";import"./enumeration-94b1319d.js";import"./colorRamps-f3b121e7.js";class at{convertVectorFieldData(t){const e=i.fromJSON(t.pixelBlock),o=p(e,t.type);return Promise.resolve(a(o)?o.toJSON():null)}async decode(t){const e=await x(t.data,t.options);return e&&e.toJSON()}symbolize(t){t.pixelBlock=i.fromJSON(t.pixelBlock),t.extent=t.extent?m.fromJSON(t.extent):null;const e=this.symbolizer.symbolize(t);return Promise.resolve(a(e)?e.toJSON():null)}async updateSymbolizer(t){var e;this.symbolizer=O.fromJSON(t.symbolizerJSON),t.histograms&&((e=this.symbolizer)==null?void 0:e.rendererJSON.type)==="rasterStretch"&&(this.symbolizer.rendererJSON.histograms=t.histograms)}async updateRasterFunction(t){this.rasterFunction=J(t.rasterFunctionJSON)}async process(t){const e=this.rasterFunction.process({extent:m.fromJSON(t.extent),primaryPixelBlocks:t.primaryPixelBlocks.map(o=>a(o)?i.fromJSON(o):null),primaryRasterIds:t.primaryRasterIds});return a(e)?e.toJSON():null}stretch(t){const e=this.symbolizer.simpleStretch(i.fromJSON(t.srcPixelBlock),t.stretchParams);return Promise.resolve(a(e)&&e.toJSON())}estimateStatisticsHistograms(t){const e=N(i.fromJSON(t.srcPixelBlock));return Promise.resolve(e)}split(t){const e=f(i.fromJSON(t.srcPixelBlock),t.tileSize,t.maximumPyramidLevel);return e&&e.forEach((o,r)=>{e.set(r,o==null?void 0:o.toJSON())}),Promise.resolve(e)}async mosaicAndTransform(t){const e=t.srcPixelBlocks.map(n=>n?new i(n):null),o=u(e,t.srcMosaicSize,{blockWidths:t.blockWidths,alignmentInfo:t.alignmentInfo,clipOffset:t.clipOffset,clipSize:t.clipSize});let r,s=o;return t.coefs&&(s=d(o,t.destDimension,t.coefs,t.sampleSpacing,t.interpolation)),t.projectDirections&&t.gcsGrid&&(r=S(t.destDimension,t.gcsGrid),s=l(h(s,t.isUV?"vector-uv":"vector-magdir",r))),{pixelBlock:s==null?void 0:s.toJSON(),localNorthDirections:r}}async createFlowMesh(t,e){const o={data:new Float32Array(t.flowData.buffer),mask:new Uint8Array(t.flowData.maskBuffer),width:t.flowData.width,height:t.flowData.height},{vertexData:r,indexData:s}=await y(t.meshType,t.simulationSettings,o,e.signal);return{result:{vertexBuffer:r.buffer,indexBuffer:s.buffer},transferList:[r.buffer,s.buffer]}}async getProjectionOffsetGrid(t){const e=m.fromJSON(t.projectedExtent),o=m.fromJSON(t.srcBufferExtent);let r=null;t.datumTransformationSteps&&(r=new c({steps:t.datumTransformationSteps})),(t.includeGCSGrid||g(e.spatialReference,o.spatialReference,r))&&await w();const s=t.rasterTransform?b(t.rasterTransform):null;return B({...t,projectedExtent:e,srcBufferExtent:o,datumTransformation:r,rasterTransform:s})}}export{at as default};
