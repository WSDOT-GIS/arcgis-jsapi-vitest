import{a as d}from"./Error-781981d1.js";import{a as u}from"./layerUtils-5e9bebc1.js";import{a as I}from"./lazyLayerLoader-e1c05d81.js";import L from"./PortalItem-90bf2143.js";import{getNumLayersAndTables as l,preprocessFSItemData as S,getSubtypeGroupLayerIds as g,getFirstLayerOrTableId as T}from"./layersLoader-b01dfabc.js";import{s as m}from"./portalItemUtils-2867876d.js";import{t as c}from"./fetchService-659cc3dd.js";import"./string-75082bc6.js";import"./typedArrayUtil-74bbfd45.js";import"./request-6e1d5843.js";import"./preload-helper-fb43855a.js";import"./promiseUtils-28f2a985.js";import"./Accessor-815cb0cf.js";import"./watch-c7facfb0.js";import"./ArrayPool-ae2ef0ab.js";import"./nextTick-3ee5a785.js";import"./ensureType-125d327f.js";import"./assets-7bd3ffcf.js";import"./JSONSupport-2b897629.js";import"./Loadable-6776e4d9.js";import"./Promise-092442f7.js";import"./Extent-8fae2379.js";import"./cast-f7d2a22f.js";import"./Portal-c7b19d88.js";import"./locale-30120714.js";import"./PortalGroup-d3a43002.js";import"./PortalUser-a3f3561a.js";import"./Layer-9c99e5a9.js";import"./geometry-0d19f94b.js";import"./Polyline-40b9e769.js";import"./typeUtils-3bf84b36.js";import"./Evented-3dfb26f2.js";import"./Identifiable-f5397426.js";import"./arcgisLayerUrl-94ca51fa.js";import"./persistableUrlUtils-0364346d.js";import"./jsonContext-2d0e3b89.js";import"./styleUtils-023b7cfa.js";import"./asyncUtils-5c97747c.js";import"./projection-6de68766.js";import"./mathUtils-15f63a45.js";import"./SimpleObservable-729c9019.js";import"./mat4-a8da3f27.js";import"./zscale-a617710a.js";async function Ve(e){!e.portalItem||e.portalItem instanceof L||(e={...e,portalItem:new L(e.portalItem)});const r=await v(e.portalItem);return new r.constructor({portalItem:e.portalItem,...r.properties})}async function v(e){return await e.load(),G(await F(e))}async function F(e){switch(e.type){case"Map Service":return M(e);case"Feature Service":return $(e);case"Feature Collection":return b(e);case"Scene Service":return h(e);case"Image Service":return C(e);case"Stream Service":return V();case"Vector Tile Service":return j();case"GeoJson":return W();case"CSV":return D();case"KML":return K();case"WFS":return O();case"WMTS":return x();case"WMS":return k();case"Feed":return A();default:throw new d("portal:unknown-item-type","Unknown item type '${type}'",{type:e.type})}}async function G(e){const r=I[e.className];return{constructor:await r(),properties:e.properties}}async function M(e){return await R(e)?{className:"TileLayer"}:{className:"MapImageLayer"}}async function $(e){if(m(e,"Oriented Imagery Layer"))return J(e);const r=await N(e);if(typeof r=="object"){const a={};return r.id!=null&&(a.layerId=r.id),{className:r.className||"FeatureLayer",properties:a}}return{className:"GroupLayer"}}async function h(e){var a,t;const r=await N(e);if(typeof r=="object"){const o={};let n;if(r.id!=null?(o.layerId=r.id,n=`${e.url}/layers/${r.id}`):n=e.url,(a=e.typeKeywords)==null?void 0:a.length){for(const i of Object.keys(u))if(e.typeKeywords.includes(i))return{className:u[i]}}const s=await c(n);return{className:u[s==null?void 0:s.layerType]||"SceneLayer",properties:o}}return r===!1?((t=await c(e.url))==null?void 0:t.layerType)==="Voxel"?{className:"VoxelLayer"}:{className:"GroupLayer"}:{className:"GroupLayer"}}async function b(e){await e.load();const r=m(e,"Map Notes"),a=m(e,"Markup");if(r||a)return{className:"MapNotesLayer"};if(m(e,"Route Layer"))return{className:"RouteLayer"};const t=await e.fetchData();return l(t)===1?{className:"FeatureLayer"}:{className:"GroupLayer"}}async function C(e){var s,i,y,f;await e.load();const r=((s=e.typeKeywords)==null?void 0:s.map(w=>w.toLowerCase()))??[];if(r.includes("elevation 3d layer"))return{className:"ElevationLayer"};if(r.includes("tiled imagery"))return{className:"ImageryTileLayer"};const a=(i=await e.fetchData())==null?void 0:i.layerType;if(a==="ArcGISTiledImageServiceLayer")return{className:"ImageryTileLayer"};if(a==="ArcGISImageServiceLayer")return{className:"ImageryLayer"};const t=await c(e.url),o=(y=t.cacheType)==null?void 0:y.toLowerCase(),n=(f=t.capabilities)==null?void 0:f.toLowerCase().includes("tilesonly");return o==="map"||n?{className:"ImageryTileLayer"}:{className:"ImageryLayer"}}function V(){return{className:"StreamLayer"}}function j(){return{className:"VectorTileLayer"}}function W(){return{className:"GeoJSONLayer"}}function D(){return{className:"CSVLayer"}}function K(){return{className:"KMLLayer"}}function O(){return{className:"WFSLayer"}}function k(){return{className:"WMSLayer"}}function x(){return{className:"WMTSLayer"}}function A(){return{className:"StreamLayer"}}async function J(e){await e.load();const r=await e.fetchData();return r.coverage?{className:"GroupLayer"}:{className:"OrientedImageryLayer",properties:r}}async function R(e){return(await c(e.url)).tileInfo}async function N(e){const r=e.url;if(!r||r.match(/\/\d+$/))return{};await e.load();const a=await e.fetchData();if(e.type==="Feature Service"){const t=p(await S(a,r));if(typeof t=="object"){const o=g(a);t.className=t.id!=null&&o.includes(t.id)?"SubtypeGroupLayer":"FeatureLayer"}return t}return l(a)>0?p(a):p(await c(r))}function p(e){return l(e)===1&&{id:T(e)}}export{Ve as fromItem,F as selectLayerClassPath};
