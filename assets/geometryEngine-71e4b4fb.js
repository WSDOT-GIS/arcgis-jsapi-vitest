import{G as t}from"./geometryEngineBase-e1a33b0a.js";import{hydratedAdapter as r}from"./hydrated-32185dbd.js";import"./Extent-8fae2379.js";import"./Accessor-815cb0cf.js";import"./typedArrayUtil-74bbfd45.js";import"./watch-c7facfb0.js";import"./ArrayPool-ae2ef0ab.js";import"./string-75082bc6.js";import"./nextTick-3ee5a785.js";import"./promiseUtils-28f2a985.js";import"./Error-781981d1.js";import"./ensureType-125d327f.js";import"./JSONSupport-2b897629.js";import"./cast-f7d2a22f.js";import"./Polyline-40b9e769.js";function i(e){return Array.isArray(e)?e[0].spatialReference:e&&e.spatialReference}function V(e){return t.extendedSpatialReferenceInfo(e)}function v(e,n){return t.clip(r,i(e),e,n)}function z(e,n){return t.cut(r,i(e),e,n)}function H(e,n){return t.contains(r,i(e),e,n)}function I(e,n){return t.crosses(r,i(e),e,n)}function J(e,n,o){return t.distance(r,i(e),e,n,o)}function N(e,n){return t.equals(r,i(e),e,n)}function O(e,n){return t.intersects(r,i(e),e,n)}function b(e,n){return t.touches(r,i(e),e,n)}function j(e,n){return t.within(r,i(e),e,n)}function q(e,n){return t.disjoint(r,i(e),e,n)}function B(e,n){return t.overlaps(r,i(e),e,n)}function C(e,n,o){return t.relate(r,i(e),e,n,o)}function E(e){return t.isSimple(r,i(e),e)}function P(e){return t.simplify(r,i(e),e)}function G(e,n=!1){return t.convexHull(r,i(e),e,n)}function $(e,n){return t.difference(r,i(e),e,n)}function k(e,n){return t.symmetricDifference(r,i(e),e,n)}function F(e,n){return t.intersect(r,i(e),e,n)}function K(e,n=null){return t.union(r,i(e),e,n)}function M(e,n,o,a,s,u){return t.offset(r,i(e),e,n,o,a,s,u)}function Q(e,n,o,a=!1){return t.buffer(r,i(e),e,n,o,a)}function U(e,n,o,a,s,u){return t.geodesicBuffer(r,i(e),e,n,o,a,s,u)}function W(e,n,o=!0){return t.nearestCoordinate(r,i(e),e,n,o)}function X(e,n){return t.nearestVertex(r,i(e),e,n)}function Y(e,n,o,a){return t.nearestVertices(r,i(e),e,n,o,a)}function f(e){var n;return"xmin"in e?"center"in e?e.center:null:"x"in e?e:"extent"in e?((n=e.extent)==null?void 0:n.center)??null:null}function Z(e,n,o){if(e==null)throw new c;const a=e.spatialReference;if((o=o??f(e))==null)throw new c;const s=e.constructor.fromJSON(t.rotate(e,n,o));return s.spatialReference=a,s}function _(e,n){if(e==null)throw new c;const o=e.spatialReference;if((n=n??f(e))==null)throw new c;const a=e.constructor.fromJSON(t.flipHorizontal(e,n));return a.spatialReference=o,a}function ee(e,n){if(e==null)throw new c;const o=e.spatialReference;if((n=n??f(e))==null)throw new c;const a=e.constructor.fromJSON(t.flipVertical(e,n));return a.spatialReference=o,a}function ne(e,n,o,a){return t.generalize(r,i(e),e,n,o,a)}function te(e,n,o){return t.densify(r,i(e),e,n,o)}function re(e,n,o,a=0){return t.geodesicDensify(r,i(e),e,n,o,a)}function ie(e,n){return t.planarArea(r,i(e),e,n)}function oe(e,n){return t.planarLength(r,i(e),e,n)}function ae(e,n,o){return t.geodesicArea(r,i(e),e,n,o)}function se(e,n,o){return t.geodesicLength(r,i(e),e,n,o)}function ce(e,n){return t.intersectLinesToPoints(r,i(e),e,n)}function ue(e,n){t.changeDefaultSpatialReferenceTolerance(e,n)}function fe(e){t.clearDefaultSpatialReferenceTolerance(e)}class c extends Error{constructor(){super("Illegal Argument Exception")}}export{Q as buffer,ue as changeDefaultSpatialReferenceTolerance,fe as clearDefaultSpatialReferenceTolerance,v as clip,H as contains,G as convexHull,I as crosses,z as cut,te as densify,$ as difference,q as disjoint,J as distance,N as equals,V as extendedSpatialReferenceInfo,_ as flipHorizontal,ee as flipVertical,ne as generalize,ae as geodesicArea,U as geodesicBuffer,re as geodesicDensify,se as geodesicLength,F as intersect,ce as intersectLinesToPoints,O as intersects,E as isSimple,W as nearestCoordinate,X as nearestVertex,Y as nearestVertices,M as offset,B as overlaps,ie as planarArea,oe as planarLength,C as relate,Z as rotate,P as simplify,k as symmetricDifference,b as touches,K as union,j as within};
